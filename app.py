
import streamlit as st
import numpy as np
from sklearn.ensemble import GradientBoostingClassifier

# Побудова та навчання моделі (вбудована)
model = GradientBoostingClassifier()
model.set_params(**{'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 42, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False})
model.fit([[27.43, 0.51, 1.0, 1.0, 18.0, 23.0], [22.27, 0.4, 1.0, 2.0, 12.0, 26.0], [22.27, 0.4, 2.0, 2.0, 13.0, 26.0], [22.27, 0.4, 2.0, 2.0, 13.0, 26.0], [22.27, 0.4, 2.0, 2.0, 13.0, 27.0], [21.97, 0.4, 1.0, 2.0, 12.0, 27.0], [21.97, 0.4, 1.0, 2.0, 12.0, 27.0], [21.88, 0.44, 1.0, 2.0, 14.0, 27.0], [21.88, 0.44, 1.0, 2.0, 14.0, 27.0], [21.39, 0.4, 1.0, 2.0, 12.0, 28.0], [21.39, 0.4, 1.0, 2.0, 12.0, 28.0], [21.39, 0.4, 1.0, 2.0, 12.0, 28.0], [21.39, 0.4, 1.0, 2.0, 12.0, 28.0], [20.83, 0.42, 1.0, 2.0, 14.0, 28.0], [20.83, 0.42, 1.0, 2.0, 14.0, 28.0], [20.15, 0.39, 1.0, 2.0, 11.0, 28.0], [20.15, 0.39, 1.0, 2.0, 11.0, 28.0], [20.15, 0.39, 1.0, 2.0, 11.0, 28.0], [20.15, 0.39, 1.0, 2.0, 11.0, 28.0], [19.88, 0.4, 1.0, 2.0, 12.0, 29.0], [19.88, 0.4, 1.0, 2.0, 12.0, 29.0], [19.33, 0.39, 1.0, 2.0, 11.0, 29.0], [19.33, 0.39, 1.0, 2.0, 11.0, 29.0], [19.33, 0.39, 1.0, 2.0, 11.0, 29.0], [19.33, 0.39, 1.0, 2.0, 11.0, 29.0], [19.29, 0.39, 1.0, 1.0, 10.0, 29.0], [19.29, 0.39, 1.0, 1.0, 10.0, 29.0], [19.29, 0.39, 1.0, 2.0, 10.0, 29.0], [19.29, 0.39, 1.0, 2.0, 10.0, 29.0], [19.28, 0.41, 1.0, 1.0, 13.0, 29.0], [19.2, 0.38, 1.0, 2.0, 10.0, 29.0], [19.2, 0.38, 1.0, 2.0, 10.0, 29.0], [19.2, 0.38, 1.0, 2.0, 10.0, 29.0], [19.2, 0.38, 1.0, 2.0, 10.0, 29.0], [19.17, 0.41, 1.0, 2.0, 13.0, 29.0], [19.17, 0.41, 1.0, 2.0, 13.0, 29.0], [19.03, 0.37, 2.0, 1.0, 7.0, 30.0], [19.03, 0.37, 2.0, 1.0, 7.0, 30.0], [18.5, 0.39, 1.0, 2.0, 11.0, 30.0], [18.5, 0.39, 1.0, 2.0, 11.0, 30.0], [18.5, 0.39, 1.0, 2.0, 11.0, 30.0], [18.5, 0.39, 1.0, 2.0, 11.0, 30.0], [18.29, 0.38, 1.0, 1.0, 9.0, 31.0], [18.29, 0.38, 1.0, 1.0, 9.0, 31.0], [18.29, 0.38, 1.0, 1.0, 10.0, 31.0], [18.29, 0.38, 1.0, 2.0, 10.0, 31.0], [18.11, 0.38, 1.0, 1.0, 9.0, 31.0], [18.11, 0.38, 1.0, 1.0, 9.0, 31.0], [18.11, 0.38, 1.0, 2.0, 10.0, 31.0], [18.11, 0.38, 1.0, 2.0, 10.0, 32.0], [17.93, 0.4, 1.0, 1.0, 11.0, 32.0], [17.93, 0.4, 1.0, 1.0, 12.0, 32.0], [17.91, 0.36, 1.0, 1.0, 7.0, 32.0], [17.91, 0.36, 1.0, 1.0, 7.0, 33.0], [17.69, 0.39, 1.0, 1.0, 10.0, 33.0], [17.69, 0.39, 1.0, 1.0, 10.0, 33.0], [17.55, 0.35, 1.0, 1.0, 5.0, 33.0], [17.55, 0.35, 1.0, 1.0, 5.0, 33.0], [17.55, 0.35, 1.0, 1.0, 5.0, 33.0], [17.55, 0.35, 1.0, 1.0, 6.0, 33.0], [16.8, 0.38, 1.0, 1.0, 8.0, 33.0], [16.8, 0.38, 1.0, 1.0, 8.0, 34.0], [16.8, 0.38, 1.0, 1.0, 8.0, 34.0], [16.8, 0.38, 1.0, 1.0, 8.0, 34.0], [16.38, 0.38, 1.0, 1.0, 8.0, 34.0], [16.38, 0.38, 1.0, 1.0, 9.0, 35.0], [16.38, 0.38, 1.0, 1.0, 9.0, 35.0], [16.38, 0.38, 1.0, 1.0, 9.0, 35.0], [15.98, 0.47, 1.0, 1.0, 15.0, 35.0], [15.98, 0.47, 1.0, 1.0, 15.0, 36.0], [15.98, 0.47, 1.0, 1.0, 15.0, 36.0], [15.98, 0.47, 1.0, 1.0, 15.0, 36.0], [15.32, 0.36, 1.0, 1.0, 6.0, 36.0], [15.32, 0.36, 1.0, 1.0, 7.0, 36.0], [15.32, 0.36, 1.0, 1.0, 7.0, 36.0], [15.32, 0.36, 1.0, 1.0, 7.0, 36.0], [15.15, 0.34, 1.0, 1.0, 2.0, 36.0], [15.15, 0.34, 1.0, 1.0, 3.0, 36.0], [15.15, 0.34, 1.0, 1.0, 4.0, 36.0], [15.15, 0.34, 1.0, 1.0, 5.0, 38.0], [33.87, 0.44, 1.0, 2.0, 14.0, 16.0], [33.87, 0.44, 2.0, 1.0, 14.0, 18.0], [33.87, 0.44, 2.0, 1.0, 14.0, 18.0], [33.87, 0.44, 2.0, 2.0, 14.0, 19.0], [27.85, 0.58, 1.0, 2.0, 20.0, 20.0], [27.85, 0.58, 2.0, 2.0, 20.0, 21.0], [27.85, 0.58, 2.0, 2.0, 22.0, 22.0], [27.85, 0.58, 2.0, 2.0, 24.0, 22.0], [27.43, 0.51, 1.0, 2.0, 18.0, 23.0], [27.43, 0.51, 2.0, 2.0, 18.0, 23.0], [27.43, 0.51, 2.0, 2.0, 18.0, 23.0], [25.56, 0.47, 2.0, 1.0, 16.0, 23.0], [25.56, 0.47, 2.0, 1.0, 16.0, 24.0], [25.56, 0.47, 2.0, 2.0, 16.0, 24.0], [25.56, 0.47, 2.0, 2.0, 16.0, 24.0], [23.31, 0.48, 1.0, 2.0, 17.0, 24.0], [23.31, 0.48, 1.0, 2.0, 17.0, 24.0], [23.31, 0.48, 1.0, 2.0, 17.0, 25.0], [23.31, 0.48, 1.0, 2.0, 17.0, 25.0], [23.04, 0.43, 1.0, 2.0, 14.0, 25.0], [23.04, 0.43, 1.0, 2.0, 14.0, 26.0], [23.04, 0.43, 2.0, 2.0, 14.0, 26.0], [23.04, 0.43, 2.0, 2.0, 14.0, 26.0], [21.97, 0.4, 1.0, 2.0, 12.0, 27.0], [21.97, 0.4, 1.0, 2.0, 12.0, 27.0], [21.88, 0.44, 1.0, 2.0, 14.0, 27.0], [21.88, 0.44, 1.0, 2.0, 14.0, 28.0], [20.83, 0.42, 1.0, 2.0, 14.0, 28.0], [20.83, 0.42, 1.0, 2.0, 14.0, 28.0], [19.28, 0.41, 1.0, 2.0, 13.0, 29.0], [19.28, 0.41, 2.0, 1.0, 13.0, 29.0], [19.28, 0.41, 2.0, 2.0, 13.0, 29.0], [19.17, 0.41, 1.0, 2.0, 13.0, 29.0], [19.17, 0.41, 1.0, 2.0, 13.0, 30.0], [18.9, 0.43, 1.0, 2.0, 14.0, 30.0], [18.9, 0.43, 1.0, 2.0, 14.0, 30.0], [18.9, 0.43, 2.0, 1.0, 14.0, 30.0], [18.9, 0.43, 2.0, 2.0, 14.0, 30.0], [18.4, 0.37, 2.0, 1.0, 8.0, 30.0], [18.4, 0.37, 2.0, 2.0, 8.0, 31.0], [18.4, 0.37, 2.0, 2.0, 8.0, 31.0], [18.4, 0.37, 2.0, 2.0, 8.0, 31.0], [17.93, 0.4, 2.0, 1.0, 12.0, 32.0], [17.93, 0.4, 2.0, 2.0, 13.0, 32.0], [17.69, 0.39, 1.0, 2.0, 11.0, 33.0], [17.69, 0.39, 1.0, 2.0, 11.0, 33.0]], [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2])

st.title("Прогноз потреби у реабілітаційних заходах")

st.markdown("Введіть показники дитини:")

imt = st.number_input("IMT – Індекс маси тіла", min_value=10.0, max_value=40.0, step=0.1)
wt = st.number_input("WT – Співвідношення талії до зросту", min_value=0.2, max_value=0.7, step=0.01)
zsu = st.selectbox("ZSU – Перебування на окупованій території", [1, 2])
eva = st.selectbox("Eva – Евакуація з окупованої території", [1, 2])
distress = st.slider("Сприйнятий дистрес", 0, 30, 10)
gsi = st.slider("Самоефективність", 0, 30, 15)

input_data = np.array([[imt, wt, zsu, eva, distress, gsi]])
prediction = model.predict(input_data)[0]

if st.button("Прогнозувати"):
    if prediction == 2:
        st.error("Дитина ПОТРЕБУЄ реабілітаційних заходів.")
    else:
        st.success("Дитина НЕ потребує реабілітаційних заходів.")
